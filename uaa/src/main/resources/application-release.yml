server:
  port: 8080
  servlet:
    context‐path: /uaa

spring:

  datasource:
    url: jdbc:mysql://${MYSQL_HOST}:3306/distributed_chat?useSSL=false&serverTimezone=GMT%2B8
    username: distributed_chat
    password: ${REDIS_PASSWORD}
    driver-class-name: com.mysql.jdbc.Driver
  application:
    name: uaa-service
  profiles:
    active: dev # 开发环境
  cloud:
    sentinel:
      transport:
        dashboard: localhost:8090
  main:
    allow-bean-definition-overriding: true
  # redis
  redis:
    host: ${REDIS_HOST}
    port: 6379
    password: ${REDIS_PASSWORD}
    lettuce:
      pool:
        max-idle: 30
        max-active: 8
        max-wait: 10000
        min-idle: 10
      cluster:
        refresh:
          adaptive: true
          #20秒自动刷新一次
          period: 20
      shutdown-timeout: 100000
    database: 2

  # mq
  rabbitmq:
    host: ${RABBIT_HOST}
    username: ${RABBIT_USERNAME}
    password: ${RABBIT_PASSWORD}
    virtual-host: /
    port: 5672
    # 开启退回模式,如果队列没能ack,就会调用回退方法
    publisher-returns: true
    # 开启确认模式,如果生产者没能把消息发到交换机,就会调用回退方法
    publisher-confirm-type: correlated
    listener:
      direct:
        # 设置消息手动签收
        acknowledge-mode: manual
        # 服务端限流,这个需要根据你的承载能力去设置
        consumers-per-queue: 20


logging:
  level:
    cn.itcast: debug
  pattern:
    dateformat: MM-dd HH:mm:ss:SSS



#seata:
#  registry: # TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址
#    # 参考tc服务自己的registry.conf中的配置
#    type: nacos
#    nacos: # tc
#      server-addr: 127.0.0.1:8848
#      namespace: ""
#      group: DEFAULT_GROUP
#      application: seata-tc-server # tc服务在nacos中的服务名称
#  tx-service-group: seata-demo # 事务组，根据这个获取tc服务的cluster名称
#  service:
#    vgroup-mapping: # 事务组与TC服务cluster的映射关系
#      seata-demo: default
#  data-source-proxy-mode: XA
